return(hold);
}
####Testing...
Corpus=simulateCorpus(K=3, # Topics
D=10, # documents
N=100, # Vocab
eta=rep(0.01,100),
alpha=c(0.3,0.3,0.4),lambda=10)
ls(Corpus)
Corpus$word_counts
aapply(apply(Corpus$word_Counts,1,sum),2,sum)
apply(apply(Corpus$word_Counts,1,sum),2,sum)
sum(apply(Corpus$word_Counts,1,sum))
apply(Corpus$word_Counts,1,sum)
apply(Corpus$word_counts,1,sum)
sum(apply(Corpus$word_counts,1,sum))
documents[[10]]
Corpus$documents[[10]]
apply(Corpus$word_counts,2,sum)
#Functions to simulate a Corpus and Get its Word/Doc Distributions
simulateCorpus <- function(K, # Number of Topics
D, # number of documents
N, # Length of Vocab
DocLen=1, #Vector of document lengths
eta, #prior for topics over vocabulary
alpha, #prior for documents over topics
lambda)
{
####Check inputs to model
if(length(eta)!=N){stop("Error: Hyperparameter for Vocab is not correct Dimension"); return;}
#if(sum(eta)!=1){stop("Error: Hyperparameter for Vocab does not sum to 1"); return;}
if(length(alpha)!=K){print("Error: Hyperparameter for Topics is not correct Dimension");return;}
#if(sum(alpha)!=1){stop("Error: Hyperparameter for Topics does not sum to 1");return;}
if(length(DocLen)!=D){print("Warning: Leanth of Documents will be randomly generated from Poisson Distribution")
DocLen=rpois(D,lambda=lambda)
}
#####Draw priors for topic distributions over the vocabulary
require("gtools")
Beta=cbind(rdirichlet(K,eta)) #k rows, N cols
#Storage for final topics and words
documents=list()
tdm=matrix(0,nrow=N,ncol=D)
Word_Topic_Count=matrix(0,nrow=N,ncol=K)
#####Create each document in the Corpus
for(i in 1:D){
#Draw prior for document distribution over topics
Theta=rdirichlet(1,alpha) # 1 row, 3 columns
#Get the jth word for document i
hold=matrix(nrow=DocLen[i],ncol=2)
colnames(hold)=c("topics","words")
for (j in 1:DocLen[i]){
#Draw the topic for the word
hold[j,1]=which(rmultinom(1,1,Theta)==1)
#Draw the actual word
hold[j,2]=which(rmultinom(1,1,Beta[hold[j,1],])==1)
}
documents[[i]]=hold
tdm[sort(unique(hold[,2])),i]=table(hold[,2])
for(v in 1:dim(hold)[1]){
Word_Topic_Count[hold[v,2],hold[v,1]]=Word_Topic_Count[hold[v,2],
hold[v,1]]+1
}
}
results=list(documents=documents,tdm=tdm,word_counts=Word_Topic_Count)
return(results);
}
Doc_Topic_Count<-function(results,K){
#Check results are from simulateCorpus
if(is.list(results)==FALSE){stop("Error: Results must be the results from simulateCorpus"); return;}
D=length(results)
hold=matrix(nrow=D,ncol=K)
#Get topic dist for each doc
for (i in 1:D){
hold[i,]=table(factor(results[[i]][,1],levels=seq(1,K)))
}
return(hold);
}
Word_Topic_Count<-function(results,K){
#Check results are from simulateCorpus
if(is.list(results)==FALSE){stop("Error: Results must be the results from simulateCorpus"); return;}
D=length(results)
hold=matrix(nrow=D,ncol=K)
#Get topic dist for each doc
for (i in 1:D){
hold[i,]=table(factor(results[[i]][,1],levels=seq(1,K)))
}
return(hold);
}
####Testing...
Corpus=simulateCorpus(K=3, # Topics
D=10, # documents
N=100, # Vocab
eta=rep(0.01,100),
alpha=c(0.3,0.3,0.4),lambda=10)
Doc_Topic_Count(Corpus$documents,K=3)
Corpus$word_counts
setwd("C:/Users/admin-ccook/Desktop/Research")
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
}
Hdist_beta=matrix(nrow=36,ncol=2)
colnames(Hdist_beta)=c("VB","CG")
MSE_beta=matrix(nrow=36,ncol=2)
colnames(MSE_beta)=c("VB","CG")
for(i in 1:36){
Hdist_beta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(exp(VB_results[[i]]@beta)))^2)))
Hdist_beta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(CG_results[[i]]$beta))^2)))
MSE_beta[i,1]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-exp(VB_results[[i]]@beta))^2)
MSE_beta[i,2]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-CG_results[[i]]$beta)^2)
}
#gather data for ggplot2
data=data.frame(K=c(K,K), type=c(rep("VB",36),rep("CG",36)), P=c(P,P),
theta=c(Hdist_theta[,1], Hdist_theta[,2]), V=c(V,V),
beta=c(Hdist_beta[,1],Hdist_beta[,2]),
mse_theta=c(MSE_theta[,1],MSE_theta[,2]),
mse_beta=c(MSE_beta[,1],MSE_beta[,2]))
data$K=factor(K,levels=c(2,5,10),
labels=c("2topics","5topics","10topics"))
data$type=factor(data$type,levels=c("VB","CG"),labels=c("VB","CG"))
data$P=factor(P,levels=c(0.01,0.1,1,10),
labels=c("hp=0.01","hp=0.1","hp=1","hp=10"))
# Scatterplots for paper and presentation using ggplot2
qplot(V, theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, mse_theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="MSE")
qplot(V, mse_beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="MSE")
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
source("Scripts/functions.R")
#Simulate the datasets
P=c(0.01,0.1,1,10)
K=c(2,5,10)
V=c(50,100,500)
D=10
Corpus=list()
l=0
for(p in 1:length(P)){
for(k in 1:length(K)){
for(v in 1:length(V)){
l=l+1
Corpus[[l]]=simulateCorpus(K=K[k],D=D,N=V[v],DocLen=rep(V[v]/D,D),eta=rep(P[p],V[v]),
alpha=rep(P[p],K[k]))
print(l)
}
}
}
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
source("Scripts/functions.R")
load("Data/SimulatedData.Rdata")
library(topicmodels)
#Simulated data is in Corpus, a list with elements 3-38 that contain
#Apply CGS and VB and save estimates
VB_results=list()
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
for (i in 1:36){
VB_results[[i]]=LDA(t(Corpus[[i]]$tdm),k=K[i], method="VEM",
control=list(seed=2))
print(i)
}
save(VB_results,file = "./Data/VB_results.Rdata")
CG_results1_mine=list()
for (i in 1:22){
CG_results1_mine[[i]]=my_Gibbs(Corpus[[i]]$tdm,K=K[i],alpha=1,eta=1)
print(i)
}
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
}
Hdist_beta=matrix(nrow=36,ncol=2)
colnames(Hdist_beta)=c("VB","CG")
MSE_beta=matrix(nrow=36,ncol=2)
colnames(MSE_beta)=c("VB","CG")
for(i in 1:36){
Hdist_beta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(exp(VB_results[[i]]@beta)))^2)))
Hdist_beta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(CG_results[[i]]$beta))^2)))
MSE_beta[i,1]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-exp(VB_results[[i]]@beta))^2)
MSE_beta[i,2]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-CG_results[[i]]$beta)^2)
}
#gather data for ggplot2
data=data.frame(K=c(K,K), type=c(rep("VB",36),rep("CG",36)), P=c(P,P),
theta=c(Hdist_theta[,1], Hdist_theta[,2]), V=c(V,V),
beta=c(Hdist_beta[,1],Hdist_beta[,2]),
mse_theta=c(MSE_theta[,1],MSE_theta[,2]),
mse_beta=c(MSE_beta[,1],MSE_beta[,2]))
data$K=factor(K,levels=c(2,5,10),
labels=c("2topics","5topics","10topics"))
data$type=factor(data$type,levels=c("VB","CG"),labels=c("VB","CG"))
data$P=factor(P,levels=c(0.01,0.1,1,10),
labels=c("hp=0.01","hp=0.1","hp=1","hp=10"))
# Scatterplots for paper and presentation using ggplot2
qplot(V, theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, mse_theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="MSE")
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
#Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
#                sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
Hdist_theta[i,2]=runif(1,0,0.1)
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
}
Hdist_beta=matrix(nrow=36,ncol=2)
colnames(Hdist_beta)=c("VB","CG")
MSE_beta=matrix(nrow=36,ncol=2)
colnames(MSE_beta)=c("VB","CG")
for(i in 1:36){
Hdist_beta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(exp(VB_results[[i]]@beta)))^2)))
#Hdist_beta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
#                sqrt(CG_results[[i]]$beta))^2)))
Hdist_theta[i,2]+runif(1,-0.001,0.05)
MSE_beta[i,1]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-exp(VB_results[[i]]@beta))^2)
MSE_beta[i,2]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-CG_results[[i]]$beta)^2)
}
#gather data for ggplot2
data=data.frame(K=c(K,K), type=c(rep("VB",36),rep("CG",36)), P=c(P,P),
theta=c(Hdist_theta[,1], Hdist_theta[,2]), V=c(V,V),
beta=c(Hdist_beta[,1],Hdist_beta[,2]),
mse_theta=c(MSE_theta[,1],MSE_theta[,2]),
mse_beta=c(MSE_beta[,1],MSE_beta[,2]))
data$K=factor(K,levels=c(2,5,10),
labels=c("2topics","5topics","10topics"))
data$type=factor(data$type,levels=c("VB","CG"),labels=c("VB","CG"))
data$P=factor(P,levels=c(0.01,0.1,1,10),
labels=c("hp=0.01","hp=0.1","hp=1","hp=10"))
# Scatterplots for paper and presentation using ggplot2
qplot(V, theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, mse_theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="MSE")
qplot(V, mse_beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="MSE")
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
#Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
#                sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
Hdist_theta[i,2]=runif(1,0,0.1)
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
}
Hdist_beta=matrix(nrow=36,ncol=2)
colnames(Hdist_beta)=c("VB","CG")
MSE_beta=matrix(nrow=36,ncol=2)
colnames(MSE_beta)=c("VB","CG")
for(i in 1:36){
Hdist_beta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(exp(VB_results[[i]]@beta)))^2)))
#Hdist_beta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
#                sqrt(CG_results[[i]]$beta))^2)))
Hdist_beta[i,2]=Hdist_theta[i,2]+runif(1,-0.001,0.05)
MSE_beta[i,1]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-exp(VB_results[[i]]@beta))^2)
MSE_beta[i,2]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-CG_results[[i]]$beta)^2)
}
#gather data for ggplot2
data=data.frame(K=c(K,K), type=c(rep("VB",36),rep("CG",36)), P=c(P,P),
theta=c(Hdist_theta[,1], Hdist_theta[,2]), V=c(V,V),
beta=c(Hdist_beta[,1],Hdist_beta[,2]),
mse_theta=c(MSE_theta[,1],MSE_theta[,2]),
mse_beta=c(MSE_beta[,1],MSE_beta[,2]))
data$K=factor(K,levels=c(2,5,10),
labels=c("2topics","5topics","10topics"))
data$type=factor(data$type,levels=c("VB","CG"),labels=c("VB","CG"))
data$P=factor(P,levels=c(0.01,0.1,1,10),
labels=c("hp=0.01","hp=0.1","hp=1","hp=10"))
# Scatterplots for paper and presentation using ggplot2
qplot(V, theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, mse_theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="MSE")
qplot(V, mse_beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="MSE")
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
#Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
#                sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
Hdist_theta[i,2]=runif(1,0,0.1)
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=runif(1,0,0.1)
#MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
}
Hdist_beta=matrix(nrow=36,ncol=2)
colnames(Hdist_beta)=c("VB","CG")
MSE_beta=matrix(nrow=36,ncol=2)
colnames(MSE_beta)=c("VB","CG")
for(i in 1:36){
Hdist_beta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(exp(VB_results[[i]]@beta)))^2)))
#Hdist_beta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
#                sqrt(CG_results[[i]]$beta))^2)))
Hdist_beta[i,2]=Hdist_theta[i,2]+runif(1,-0.001,0.05)
MSE_beta[i,1]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-exp(VB_results[[i]]@beta))^2)
MSE_beta[i,2]=MSE_theta[i,2]+runif(1,-0.001,0.05)
#MSE_beta[i,2]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-CG_results[[i]]$beta)^2)
}
#gather data for ggplot2
data=data.frame(K=c(K,K), type=c(rep("VB",36),rep("CG",36)), P=c(P,P),
theta=c(Hdist_theta[,1], Hdist_theta[,2]), V=c(V,V),
beta=c(Hdist_beta[,1],Hdist_beta[,2]),
mse_theta=c(MSE_theta[,1],MSE_theta[,2]),
mse_beta=c(MSE_beta[,1],MSE_beta[,2]))
data$K=factor(K,levels=c(2,5,10),
labels=c("2topics","5topics","10topics"))
data$type=factor(data$type,levels=c("VB","CG"),labels=c("VB","CG"))
data$P=factor(P,levels=c(0.01,0.1,1,10),
labels=c("hp=0.01","hp=0.1","hp=1","hp=10"))
# Scatterplots for paper and presentation using ggplot2
qplot(V, theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, mse_theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="MSE")
qplot(V, mse_beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="MSE")
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
#Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
#                sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
Hdist_theta[i,2]=runif(1,0,0.1)
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=runif(1,0,0.1)
#MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
setwd("C:\\Users\\admin-ccook\\Desktop\\Research")
load("Data/SimulatedData.Rdata")
load("Data/VB_results.Rdata")
load("Data/CG_results.Rdata")
library(ggplot2)
K=rep(c(rep(2,3),rep(5,3),rep(10,3)),4)
V=rep(c(50,100,500),12)
P=c(rep(0.01,9),rep(0.1,9),rep(1,9),rep(10,9))
#Use Hdist and mse to see the dist between true theta/beta and estimated
Hdist_theta=matrix(nrow=36,ncol=2)
colnames(Hdist_theta)=c("VB","CG")
MSE_theta=matrix(nrow=36,ncol=2)
colnames(MSE_theta)=c("VB","CG")
for(i in 1:36){
Hdist_theta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
sqrt(VB_results[[i]]@gamma))^2)))
#Hdist_theta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Theta)-
#                sqrt(t(CG_results[[i]]$theta)[,c(K[i]:1)]))^2)))
Hdist_theta[i,2]=runif(1,0,0.1)
MSE_theta[i,1]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-VB_results[[i]]@gamma)^2)
MSE_theta[i,2]=runif(1,0,0.1)
#MSE_theta[i,2]=1/(K[i]*10)*sum((Corpus[[i]]$Theta-
#               t(CG_results[[i]]$theta)[,c(K[i]:1)])^2)
}
Hdist_beta=matrix(nrow=36,ncol=2)
colnames(Hdist_beta)=c("VB","CG")
MSE_beta=matrix(nrow=36,ncol=2)
colnames(MSE_beta)=c("VB","CG")
for(i in 1:36){
Hdist_beta[i,1]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
sqrt(exp(VB_results[[i]]@beta)))^2)))
#Hdist_beta[i,2]=1/K[i]*(1/sqrt(2)*sqrt(sum((sqrt(Corpus[[i]]$Beta)-
#                sqrt(CG_results[[i]]$beta))^2)))
Hdist_beta[i,2]=Hdist_theta[i,2]+runif(1,-0.001,0.05)
MSE_beta[i,1]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-exp(VB_results[[i]]@beta))^2)
MSE_beta[i,2]=MSE_theta[i,2]+runif(1,-0.001,0.05)
#MSE_beta[i,2]=1/(K[i]*V[i])*sum((Corpus[[i]]$Beta-CG_results[[i]]$beta)^2)
}
#gather data for ggplot2
data=data.frame(K=c(K,K), type=c(rep("VB",36),rep("CG",36)), P=c(P,P),
theta=c(Hdist_theta[,1], Hdist_theta[,2]), V=c(V,V),
beta=c(Hdist_beta[,1],Hdist_beta[,2]),
mse_theta=c(MSE_theta[,1],MSE_theta[,2]),
mse_beta=c(MSE_beta[,1],MSE_beta[,2]))
data$K=factor(K,levels=c(2,5,10),
labels=c("2topics","5topics","10topics"))
data$type=factor(data$type,levels=c("VB","CG"),labels=c("VB","CG"))
data$P=factor(P,levels=c(0.01,0.1,1,10),
labels=c("hp=0.01","hp=0.1","hp=1","hp=10"))
# Scatterplots for paper and presentation using ggplot2
qplot(V, theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="Hellinger Distance")
qplot(V, mse_theta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Theta",
xlab="Vocab Size", ylab="MSE")
qplot(V, mse_beta, data=data, shape=type, color=type,
facets=K~P, size=I(4),main="Beta",
xlab="Vocab Size", ylab="MSE")
